apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: hasura-outputport-template.1
  title: Hasura Output Port
  description: Create a GraphQL Output Port based on Hasura
  annotations:
    backstage.io/techdocs-ref: dir:.
  mesh:
    icon: https://seeklogo.com/images/H/hasura-logo-B718105639-seeklogo.com.png
  tags:
    - hasura
    - output-port
    - graphql
spec:
  generates: componenttype:default/outputport
  owner: agilelab
  type: outputport
  parameters:
    - title: Hasura Output Port
      description: >
        ![Hasura Output
        Port](/api/techdocs/static/docs/default/template/hasura-outputport-template.1/images/template_introduction_diagram.png)


        Use this template to create an GraphQL Output Port based on a Hasura Enterprise instance. The underlying data is provided by an already existing Output Port; right now only Snowflake Output Ports are supported.


        Check out the full documentation for this template [here](/docs/default/Template/hasura-outputport-template.1).


        Please fill in metadata about this component.
      required:
        - name
        - domain
        - dataproduct
        - description
        - dependsOn
      properties:
        name:
          title: Name
          type: string
          description: Required. Name of this Output Port.
          ui:field: EntityNamePicker
          default: Hasura Output Port
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Required. Help others understand what this component is for. What
            data will it expose?
        domain:
          title: Domain
          type: string
          description: Required. Domain of the Data Product this Output Port belongs to.
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Required. Data Product this Output Port belongs to.
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: Autogenerated from the information above. A unique identifier for
            the component. It will not be editable after creation and is a
            string composed of [a-zA-Z] separated by any of [-_].
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Automatically selected from the Data Product metadata. Data Product
            development group.
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Dependencies
          type: string
          description: This Output Port must depend on existing Output Port from which it
            pulls the data.
          ui:field: EntityComponentsPicker
          ui:fieldName: dataproduct
          ui:componentsFilter: outputport
          ui:options:
            allowArbitraryValues: false
        tags:
          title: Tags
          type: array
          description: Tags for the component.
          default: []
          items:
            type: string
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
    - title: GraphQL Queries
      description: >
        Provide custom values for the table name and GraphQL fields that
        will be created inside Hasura; if you don't the default values will be
        used. Note that for this to be compatible with GraphQL, all values are
        limited to letters, numbers, and underscores.


        All these values will be prefixed with a string composed of:

        - Domain name

        - Data Product name

        - Data Product major version

        - Output Port name


        These values will first be normalized (lowercased and spaces removed) and then concatenated with underscores; you cannot change this prefix.


        For example, the "select" field for an Output Port with this metadata:

        - Domain: Healthcare

        - Data Product name: Vaccinations

        - Data Product major version: 0

        - Output Port name: Hasura Output Port


        Will be named "healthcare_vaccinations_0_hasuraoutputport_select".
      properties:
        customTableName:
          title: Table Name
          type: string
          description: Name of the Table. If not provided, then the default value (in this
            case, it will be of the form
            <DOMAIN_NAME>_<DP_NAME>_<MAJOR_VERSION>_<NORMALIZED_OUTPUT_PORT_NAME>)
            will be used.
          ui:field: RegexPicker
          default: table
          validation:
            errorMessage: The value provided does not satisfy the naming convention. Only
              uppercase and lowercase letters and underscores are allowed.
            regularExpression: ^[a-zA-Z_]\w+$|^$
        select:
          title: Select
          type: string
          description: Name for the field exposing the select query.
          ui:field: RegexPicker
          default: select
          validation:
            errorMessage: The value provided does not satisfy the naming convention. Only
              uppercase and lowercase letters and underscores are allowed.
            regularExpression: ^[a-zA-Z_]\w+$|^$
        selectByPk:
          title: Select by PK
          type: string
          description: Name for the field exposing the select by primary key query.
          ui:field: RegexPicker
          default: select_by_pk
          validation:
            errorMessage: The value provided does not satisfy the naming convention. Only
              uppercase and lowercase letters and underscores are allowed.
            regularExpression: ^[a-zA-Z_]\w+$|^$
        selectAggregate:
          title: Aggregate
          type: string
          description: Name for the field exposing the aggregations query.
          ui:field: RegexPicker
          default: aggregate
          validation:
            errorMessage: The value provided does not satisfy the naming convention. Only
              uppercase and lowercase letters and underscores are allowed.
            regularExpression: ^[a-zA-Z_]\w+$|^$
        selectStream:
          title: Stream
          type: string
          description: Name for the field exposing the stream query.
          ui:field: RegexPicker
          default: stream
          validation:
            errorMessage: The value provided does not satisfy the naming convention. Only
              uppercase and lowercase letters and underscores are allowed.
            regularExpression: ^[a-zA-Z_]\w+$|^$
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: .
        values:
          name: ${{ parameters.name }}
          domainName: ${{ parameters.domainName }}
          dataproductName: ${{ parameters.dataproductName }}
          description: ${{ parameters.description }}
          domain: ${{ parameters.domain }}
          dataproduct: ${{ parameters.dataproduct }}
          identifier: ${{ parameters.identifier }}
          developmentGroup: ${{ parameters.developmentGroup }}
          dependsOn: ${{ parameters.dependsOn }}
          tags: ${{ parameters.tags }}
          customTableName: ${{ parameters.customTableName }}
          select: ${{ parameters.select }}
          selectByPk: ${{ parameters.selectByPk }}
          selectAggregate: ${{ parameters.selectAggregate }}
          selectStream: ${{ parameters.selectStream }}
          creationDate: ${{ parameters.creationDate }}
          useCaseTemplateId: urn:dmb:utm:hasura-outputport-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:hasura-outputport-provisioner:0
          repoUrl: gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}
          rootDirectory: .
          artifact_id: ${{ parameters.name }}
          useCaseTemplateVersion: 0.0.0
    - id: publish
      name: publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts:
          - gitlab.com
        description: This is ${{ parameters.name }}
        repoUrl: gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}
        rootDirectory: .
        dataproduct: ${{ parameters.dataproduct }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

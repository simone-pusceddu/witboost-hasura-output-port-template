%SKELETON
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: ${{ values.description | dump }}
  annotations:
    gitlab.com/project-slug: 'AgileDMBSandbox/${{orgname}}/mesh.repository/${{ values.domain | replace(r/domain:| |-/, "") }}/${{ values.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}/${{ values.name.split(" ") | join("") | lower }}'
    backstage.io/techdocs-ref: dir:.
  tags:
    - outputport
    - hasura
    - graphql
spec:
  type: outputport
  lifecycle: experimental
  owner: ${{ values.developmentGroup | dump }}
  system: ${{ values.dataproduct | dump }}
  domain: ${{ values.domain | dump }}
  mesh:
    name: ${{ values.name | dump }}
    fullyQualifiedName: ${{ values.domainName }} - ${{ values.dataproductName }} - version ${{ dataProductMajorVersion }} - ${{ values.name }}
    description: ${{ values.description | dump }}
    kind: outputport
    version: ${{ values.identifier.split(".")[2] + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn: ${{ values.dependsOn }}
    platform: Hasura
    technology: Hasura
    outputPortType: GraphQL
    creationDate: ${{ values.creationDate }}
    startDate: ${{ values.creationDate }}
    dataContract:
      schema: []
    tags: {% if values.tags | length > 0 %}{% for i in values.tags %}
      - tagFQN: ${{ i }}
        source: Tag
        labelType: Manual
        state: Confirmed{% endfor %}{% else %}[]{% endif %}
    sampleData: {}
    semanticLinking: []
    specific:
      customTableName: ${{ (values.domain | replace(r/domain:| |-/, "") + "_" + values.dataproduct.split(".")[1] | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2] + "_" + values.name.split(" ").join("") + "_" + values.customTableName | default("table"       , true) ) | lower | dump }}
      select:          ${{ (values.domain | replace(r/domain:| |-/, "") + "_" + values.dataproduct.split(".")[1] | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2] + "_" + values.name.split(" ").join("") + "_" + values.select          | default("select"      , true) ) | lower | dump }}
      selectByPk:      ${{ (values.domain | replace(r/domain:| |-/, "") + "_" + values.dataproduct.split(".")[1] | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2] + "_" + values.name.split(" ").join("") + "_" + values.selectByPk      | default("select_by_pk", true) ) | lower | dump }}
      selectAggregate: ${{ (values.domain | replace(r/domain:| |-/, "") + "_" + values.dataproduct.split(".")[1] | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2] + "_" + values.name.split(" ").join("") + "_" + values.selectAggregate | default("aggregate"   , true) ) | lower | dump }}
      selectStream:    ${{ (values.domain | replace(r/domain:| |-/, "") + "_" + values.dataproduct.split(".")[1] | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2] + "_" + values.name.split(" ").join("") + "_" + values.selectStream    | default("stream"      , true) ) | lower | dump }}
